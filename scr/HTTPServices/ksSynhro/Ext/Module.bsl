
Функция СкопироватьТаблицу(ТблНаб,имяТаб)
	
	
		ТблРегХоз = новый ТаблицаЗначений;
		Для каждого кол из ТблНаб.Колонки Цикл
			ТблРегХоз.Колонки.Добавить(кол.имя);	
		КонецЦикла; 
		
		
		ДЛя каждого Зап из ТблНаб Цикл
			новСтр = ТблРегХоз.Добавить();
			ЗаполнитьЗначенияСвойств(новСтр,Зап);
		КонецЦикла; 
		
		
		
		//Добавим наименование и код
		МасИмя = Новый МАссив;
		
		Если  нрег(имяТаб)="контактнаяинформация" Тогда
			МасИмя.Добавить("Вид");	
			МасИмя.Добавить("ВидДляСписка");
		КонецеслИ;   
		
		мас = Новый МАссив;
		мас.Добавить("ФизическоеЛицо");
		Для каждого эл из МАс Цикл
			Если ТблРегХоз.Колонки.Найти(эл)<>Неопределено Тогда
				МасИмя.Добавить(эл);
			КонецесЛИ;  
		КонецЦикла;
		
		
		Если МасИмя.Количество()<>0 ТОгда
			Для каждого элИмя из масИмя Цикл
				ТблРегХоз.Колонки.Добавить(элИмя+"_Имя");
				ТблРегХоз.Колонки.Добавить(элИмя+"_Код");
			КонецЦикла;
			Для каждого НовСтр из ТблРегХоз Цикл
				ДЛя каждого элИмя из МасИмя Цикл
					новСтр[элИмя+"_Имя"] = Сокрлп(новСтр[элИмя]);
					новСтр[элИмя+"_Код"] = новСтр[элИмя].Код;
				КонецЦикла;
			КонецЦикла;
		КонецеСЛИ;    
		
		
		
		//Доп колонки
		Если ТблРегХоз.Колонки.Найти("Номенклатура")<>Неопределено Тогда 
			ТблРегХоз.Колонки.Добавить("ВидНоменклатуры");
			ТблРегХоз.Колонки.Добавить("ЕдИзм");
			ТблРегХоз.Колонки.Добавить("ЕдИзмКод");
			Для каждого НовСтр из ТблРегХоз Цикл  
				пСтк = СткСпрНоменклатура(новСтр.Номенклатура); 
				ЗаполнитьЗначенияСвойств(новСтр,пстк);
			КонецЦикла;
		КонецеСЛИ;    
		
		Если ТблРегХоз.Колонки.Найти("СтавкаНДС")<>Неопределено Тогда 
			ТблРегХоз.Колонки.Добавить("стНДС");
			Для каждого НовСтр из ТблРегХоз Цикл   
				новСтр.СтНДС = XMLСтрока(новСтр.СтавкаНДС.ПеречислениеСтавкаНДС);
			КонецЦикла;
		КонецеСЛИ;
		
		Если ТблРегХоз.Колонки.Найти("КатегорияЭксплуатации")<>Неопределено Тогда 
			ТблРегХоз.Колонки.Добавить("СрокЭкспл");
			Для каждого НовСтр из ТблРегХоз Цикл   
				новСтр.СрокЭкспл = новстр.КатегорияЭксплуатации.СрокЭксплуатации;
			КонецЦикла;
		КонецеСЛИ;
		
		
		//GUID
		ДЛя каждого Стр из ТблРегХоз Цикл
			Для каждого Кол из тблРегХоз.Колонки Цикл  
				
				зн = ПОлучитьGUID(Стр[кол.имя]);   
				Если зн = Неопределено Тогда Продолжить; КонецЕСЛИ;
				Стр[кол.имя] = зн;	
				
			КонецЦикла;
		КонецЦикла;
		
		
		Возврат ТблРегХоз;
	
КонецФункции     

Функция ПОлучитьGUID(Зн)
	
	Если ЗначениеЗаполнено(зн)=Ложь ТОгда Возврат Неопределено; КонецеслИ;
	пТип = XMLТипЗнч(зн);
	Если пТип = Неопределено Тогда Возврат Неопределено; КонецЕСлИ;
	
	пТип = СтрЗаменить(пТип.TypeName,".",Символы.ПС);
	пВид = СтрПолучитьСтроку(пТип,1); 
	
	Если пВид = "CatalogRef" или пВид = "DocumentRef" Тогда
		Возврат зн.УникальныйИдентификатор();	
	КонецЕсли; 
	
	Возврат Неопределено;
	
КонецФункции
	

Функция ПОлучитьЗапросВыб(ВидИсточник,Пар,ЭтоДок=Истина)
	
	если пар.свойство("масGUID") Тогда
		мас = Новый Массив;
		для каждого эл из Пар.масGUID Цикл 
			Если ЭтоДок ТОгда
				мас.добавить(Документы[ВидИсточник].ПолучитьСсылку(эл));
			Иначе
				мас.добавить(Справочники[ВидИсточник].ПолучитьСсылку(эл));
			КонецеСЛИ;
			
		КонецЦикла;                                                
		пар.вставить("ссылка",мас);
		пар.удалить("масGUID");
	КонецесЛИ;
	
	Запрос = новый Запрос;    
	Если ЭтоДОк ТОгда
		ТекстЗапроса = "SELECT Док.ссылка Док, _ксРегИзмененийИзФормы.лог, _ксРегИзмененийИзФормы.хэш, Док.пометкаудаления, Док.Проведен   FROM Документ.НАШОБК Док ";
	ИНаче
		ТекстЗапроса = "SELECT Док.ссылка Док, _ксРегИзмененийИзФормы.лог, _ксРегИзмененийИзФормы.хэш, Док.пометкаудаления  FROM Справочник.НАШОБК Док ";
	КонецЕсли;    
	ТекстЗапроса = ТекстЗапроса + "LEFT OUTER JOIN РегистрСведений.ксРегИзмененийИзФормы _ксРегИзмененийИзФормы ON _ксРегИзмененийИзФормы.идДок = УникальныйИдентификатор(Док.ссылка) ";
		
	
	Если Пар.свойство("_тблХЭШ") Тогда
		ДобавитьУсловиеХЭШ(ТекстЗапроса); 
		Запрос.УстановитьПараметр("тблХЭШ",пар._тблХЭШ);
	Иначе
		ТекстЗапроса = ТекстЗапроса + " WHERE 1=1 ";
	КонецЕсли;     
	
	Если ЭтоДОк Тогда
		ТекстЗапроса = ТекстЗапроса + " and Док.Проведен = Истина ";
	КонецесЛИ;
	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"НАШОБК",ВидИсточник);                       
	Для каждого Эл из ПАр Цикл
		ЗАпрос.УстановитьПараметр(Эл.Ключ,Эл.ЗНачение);
		
		ЕСли Лев(Эл.Ключ,1) = "_" Тогда
			продолжить;
		ИначеЕСли Нрег(Эл.Ключ) = "дт1" Тогда
			ТекстЗапроса = ТекстЗапроса+Символы.ПС+" and Док.Дата >= &"+Эл.Ключ;
		ИначеЕСли Нрег(Эл.Ключ) = "дт2" Тогда
			ТекстЗапроса = ТекстЗапроса+Символы.ПС+" and Док.Дата <= &"+Эл.Ключ; 
		ИначеЕсли ТипЗнч(эл.Значение)=Тип("Массив") Тогда
			ТекстЗапроса = ТекстЗапроса+Символы.ПС+" and Док."+Эл.Ключ+" IN (&"+Эл.Ключ+") ";
		Иначе
			ТекстЗапроса = ТекстЗапроса+Символы.ПС+" and Док."+Эл.Ключ+" = &"+Эл.Ключ;
		КонецеслИ;
		
	КонецЦикла;  
	
	//Специфичные условия
	ТекстЗапроса = ТекстЗапроса+глЛокализацияУсловияСинхронизации.УсловияЗапросаВыборкиПоВидам(ВидИсточник,Запрос);
	
	Запрос.Текст= ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции 

Процедура ДобавитьУсловиеХЭШ(ТекстЗапроса)   
	
	ТекстЗапроса = "
	|SELECT
	|  Т.идДок,
	|  Т.хэш
	|INTO врТБлХЭШ
	|FROM &ТблХЭШ Т
	| ;
	|
	| "  + ТекстЗапроса +"
	|
	|LEFT OUTER JOIN РегистрСведений.ксРегИзмененийИзФормы РегХЭШ ON регХЭШ.идДок = УникальныйИдентификатор(Док.ссылка)
	|
	|LEFT OUTER JOIN врТБлХЭШ ТблХЭШ ON тблХЭШ.идДОк = регХЭШ.идДок и тблХЭШ.хэш=регХЭШ.хэш
	|
	|WHERE тблХЭШ.идДок IS NULL
	|";  
	
	
КонецПроцедуры

Функция ТблВидДок(ВидИсточник,ВидПриемник,Пар)  
	
	парОбк = РегистрыСведений.ксРегИзмененийИзФормы.ПолучитьПарОбк(ВидИсточник);
	ТолькоСписок = Пар.свойство("_ТолькоСписок");
		
	
	итМас = новый МАссив; 
	Выб = ПолучитьЗапросВыб(ВидИсточник,Пар,Истина);
	Пока Выб.Следующий() Цикл
	
		ОБк = Выб.Док.ПолучитьОбъект();
		
		
		Стк = новый Структура;    
		Стк.Вставить("Содержание",СокрЛП(Обк.Ссылка));
		Стк.Вставить("идДок",Обк.Ссылка.УникальныйИдентификатор()); 
		Стк.Вставить("Лог",выб.лог);//РегистрыСведений.ксРегИзмененийИзФормы.ПолучитьЛог(Обк.Ссылка,истина));
		Стк.Вставить("хэш",выб.хэш);
		Стк.Вставить("ПометкаУдаления",выб.ПометкаУдаления);
		Стк.Вставить("Проведен",выб.Проведен);
		
		Если ТолькоСписок Тогда
			итМАс.Добавить(стк); 
			Продолжить;
		КонецЕсли;
		
		
		Стк.Вставить("Проведен",ОБк.Проведен);
		Стк.Вставить("Дата",ОБк.Дата);
		Стк.Вставить("Номер",ОБк.Номер);
		Стк.Вставить("видДок",ВидПриемник);
		
		
		
		ДЛя каждого элимя из парОбк.метаРек Цикл
			Стк.Вставить(элимя,обк[элимя]);
		КонецЦикла;   
		
		Если Стк.Свойство("ОрганизацияПолучатель") Тогда      
			стк.Вставить("контрагент",Стк.ОрганизацияПолучатель);
			Стк.Вставить("КонтрагентИНН",Стк.ОрганизацияПолучатель.ИНН);
			Стк.Вставить("КонтрагентКПП",Стк.ОрганизацияПолучатель.КПП);
			Стк.Вставить("КонтрагентИмя",Стк.ОрганизацияПолучатель.Наименование);
		иначеЕсли Стк.Свойство("Контрагент") Тогда
			Стк.Вставить("КонтрагентИНН",Стк.Контрагент.ИНН);
			Стк.Вставить("КонтрагентКПП",Стк.Контрагент.КПП);
			Стк.Вставить("КонтрагентИмя",Стк.Контрагент.Наименование);
		КонецЕСЛИ; 
		
		//GUID
		ДЛя каждого эл из Стк Цикл
			зн = ПолучитьGUID(эл.значение);   
			Если зн = Неопределено Тогда Продолжить; КонецЕСЛИ;  
			стк.Вставить(эл.ключ,зн);
		КонецЦикла;   
		
		
		сткТаб = Новый Структура;
		Для каждого мтТаб из  парОбк.метаТаб Цикл
			сткТаб.Вставить(мтТаб.ключ,СкопироватьТаблицу(Обк[мтТаб.ключ].Выгрузить(,мтТаб.Значение),мтТаб.ключ));
		КонецЦикла;
		стк.Вставить("ТабЧасть",сткТаб);
		
		
		корДопРеквизиты(ВидИсточник,Обк,Стк);
		
		
		итМАс.Добавить(стк);
		
	КонецЦикла;
	
	
	

	Возврат итМас;
	
КонецФункции  

Процедура корДопРеквизиты(ВидИсточник,Обк,Стк) 
	
	Если НРЕГ(ВидИсточник) = "внутреннеепотреблениетоваров" Тогда
		Стк.вставить("ВидХозОПерации",СокрЛП(Обк.ХозяйственнаяОперация));
	КонецеСЛИ;
	
КонецПроцедуры

Функция ТблВидСпр(ВидИсточник,ВидПриемник,Пар)
	
	ЕстьРОдитель = Метаданные.Справочники[ВидИсточник].Иерархический; 
	ЕстьВладелец = Метаданные.Справочники[ВидИсточник].Владельцы.Количество() <> 0;
	метаРек = Метаданные.Справочники[ВидИсточник].Реквизиты;  
	ТабличныеЧасти = Метаданные.Справочники[ВидИсточник].ТабличныеЧасти; 
	
	итМас = новый МАссив; 
	Выб = ПолучитьЗапросВыб(ВидИсточник,Пар,Ложь);
	Пока Выб.Следующий() Цикл
	
		ОБк = Выб.Док.ПолучитьОбъект();
	
		Стк = новый Структура;     
		Стк.Вставить("видСпр",ВидПриемник);
		Стк.Вставить("идДок",Обк.Ссылка.УникальныйИдентификатор());
		Стк.Вставить("Код",Обк.Код);
		Стк.Вставить("Наименование",Обк.Наименование);  
		Стк.Вставить("Лог",выб.лог);//РегистрыСведений.ксРегИзмененийИзФормы.ПолучитьЛог(Обк.Ссылка,истина)); 
		Стк.Вставить("хэш",выб.хэш); 
		Стк.Вставить("ПометкаУдаления",выб.ПометкаУдаления);
		
		Если ЕстьРОдитель = Истина Тогда
			Стк.Вставить("Родитель", Обк.Родитель.УникальныйИдентификатор());	
			Стк.Вставить("ЭтоГруппа",Обк.ЭтоГруппа);	
		КонецеслИ;
		Если ЕстьВладелец = Истина  Тогда
			Стк.Вставить("Владелец",Обк.Владелец.УникальныйИдентификатор());	
		КонецеслИ;
		ДЛя каждого эл из метаРек Цикл
			Стк.Вставить(эл.имя,обк[эл.имя]);
		КонецЦикла;
		
		сткТАб = новый Структура;
		Для каждого мтТаб из  ТабличныеЧасти Цикл
			сткТаб.Вставить(мтТаб.имя,СкопироватьТаблицу(Обк[мтТаб.имя].Выгрузить(),мтТаб.имя));
		КонецЦикла;
		
		стк.Вставить("ТабЧасть",сткТаб);
		
		
		Если ВидИсточник = "номенклатура" Тогда 
			СткСпрНоменклатура(Обк,Стк);
		КонецеСЛИ;
		
		
		итМАс.Добавить(стк);
		
	КонецЦикла;
	

	Возврат итМас;
	
КонецФункции   

Функция СткСпрНоменклатура(Обк,Стк=Неопределено)  
	
	Если стк=Неопределено Тогда
		Стк = новый Структура;
	КонецЕСЛИ;    
	Стк.вставить("ВидНоменклатуры",Обк.ВидНоменклатуры.Наименование);
	
	
	п = Обк.НаборУпаковок.ЕдиницаИзмерения;
	ЕСли ЗначениеЗаполнено(п)=ложь ТОгда
		Стк.вставить("ЕдИзм",СокрлП(Обк.ЕдиницаИзмерения));
		Стк.вставить("ЕдИзмКод",СокрлП(Обк.ЕдиницаИзмерения.Код));
	ИНАче   
		Стк.вставить("ЕдИзм",СокрлП(п));
		Стк.вставить("ЕдИзмКод",СокрлП(п.Код));
	КонецеслИ;  
	
	Возврат Стк;
	
КонецФункции
	
Функция СписокСинхро(Тело,КодСостояния)
	
	 Стк = XMLЗначение(Тип("ХранилищеЗначения"),Тело).Получить();
	
	 Если Стк.Свойство("видДОк") Тогда
		 видОбк = нрег(Стк.видДок);
		 итМас = ТблВидДок(видОбк,СокрЛП(Стк.ВидДокПрм),Стк.Пар);
	 ИНАчеЕсли Стк.Свойство("видСпр") Тогда
		 видОбк = нрег(Стк.видСпр);
		 итМас = ТблВидСпр(видОбк,СокрЛП(видОбк),Стк.Пар);
	 КонецесЛИ;  
	 
	 Рез =новый Структура("итМас",итМас);
	 Рез.вставить("СткИдОчереди",РегистрыСведений.ксОчередьОбменов.ПолучитьИдОчереди(видОбк));
	
	хр = Новый ХранилищеЗначения(Рез);
	Возврат XMLСтрока(хр);
	
КонецФункции   

Функция СписокСтатусаИд(Тело,КодСостояния)
	
	хр = Новый ХранилищеЗначения(РегистрыСведений.ксОчередьОбменов.СписокСтатусаИд());
	Возврат XMLСтрока(хр);
	
КонецФункции   


Функция ПолучитьВсеИд(Тело,КодСостояния)
	
	 Стк = XMLЗначение(Тип("ХранилищеЗначения"),Тело).Получить();
	
	Запрос = новый Запрос;
	Запрос.Текст = "SELECT УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Док.ссылка) ид FROM "+Стк.ВидМета+" док ";
	Тбл = Запрос.Выполнить().Выгрузить();
	
	
	хр = Новый ХранилищеЗначения(тбл.ВыгрузитьКолонку("ид"));
	Возврат XMLСтрока(хр);
	
КонецФункции   

	
Функция GETGET(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	Метод = ВРЕГ(Запрос.ПараметрыURL["ИмяМетода"]);
	
	СткПар = Новый Структура;
	Для каждого Эл из Запрос.ПараметрыЗапроса Цикл
		СткПар.Вставить(Эл.Ключ,Эл.Значение);	
	КонецЦикла;
	
	ЕСли Метод = "SYNHRO" Тогда
		Результат = СписокСинхро(Запрос.ПолучитьТелоКакСтроку(),Ответ.КодСостояния);	
	ИНачеЕСли Метод = "SYNSTATUS" Тогда
		Результат = СписокСтатусаИд(Запрос.ПолучитьТелоКакСтроку(),Ответ.КодСостояния);	
	ИНачеЕСли Метод = "GETALLID" Тогда
		Результат = ПолучитьВсеИд(Запрос.ПолучитьТелоКакСтроку(),Ответ.КодСостояния);	
	ИНачеЕСли Метод = "TEST" ТОгда
		Результат = СтрокаСоединенияИнформационнойБазы();
	ИНаче
		Запрос.КодСостояния = 404;
		Результат = "Метод "+Метод+" не обнаружен";
	КонецеСли;
	
	Ответ.УстановитьТелоИзСтроки(Результат);
	Возврат Ответ;
	
КонецФункции

Функция GETPOST(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	
	Метод = ВРЕГ(Запрос.ПараметрыURL["ИмяМетода"]);

	
	Возврат Ответ;
КонецФункции


